{"version":3,"sources":["../src/util.js","../src/calibrate.js"],"names":["weightedRandom","arr","weights","trim","length","RangeError","sum","val","weightIndex","isNaN","selected","chosenIdx","Math","random","total","lastGoodIdx","chosen","splice","u","x","document","getElementById","config","targetTime","window","exponent","glyphs","map","romanization","character","state","id","localStorage","getItem","toString","slice","question","answer","level","tests","totalTime","rounds","statsPerChar","JSON","parse","timeStarted","Date","now","currentTestNotRanked","saveState","fetch","method","mode","redirect","cache","headers","body","stringify","type","stats","setItem","nextQuestion","select","getAveragePerChar","char","hasOwnProperty","checkAnswer","changes","toLowerCase","timeElapsed","old","shift","push","focus","addEventListener","drawQuestion","textContent","value","classList","remove","offsetWidth","add","floor","setTimeout","lastState","listener","style","opacity","listenerAsync","e","key","preventDefault"],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAAA,IAAMA,EAAiB,SAACC,EAAKC,EAASC,GAIrCF,GAAAA,EAAIG,SAAWF,EAAQE,OACjB,MAAA,IAAIC,WAAW,kDAMpB,IAFDC,IACAC,EADAD,EAAM,EAEDE,EAAc,EAAGA,EAAcN,EAAQE,SAAUI,EAAa,CAE/DC,GADJF,EAAML,EAAQM,GACVC,MAAMF,GACA,MAAA,IAAIF,WAAW,uCAGrBE,EAAM,IACND,GAAOC,GAIXD,GAAQ,IAARA,EACM,MAAA,IAAID,WAAW,6CAIrBK,IAKAC,EALAD,EAAWE,KAAKC,SAAWP,EAG3BQ,EAAQ,EACRC,GAAe,EAEdP,IAAAA,EAAc,EAAGA,EAAcN,EAAQE,SAAUI,EAAa,CAG3DD,GADJO,GADAP,EAAML,EAAQM,GAEVD,EAAM,EAAG,CACLG,GAAAA,GAAYI,EAAO,CACnBH,EAAYH,EACZ,MAEJO,EAAcP,EAIdA,IAAiBN,EAAQE,OAAS,IAClCO,EAAYI,GAIhBC,IAAAA,EAASf,EAAIU,GAOVK,OANPb,OAAwB,IAATA,GAAgCA,KAE3CF,EAAIgB,OAAON,EAAW,GACtBT,EAAQe,OAAON,EAAW,IAGvBK,GAzDJ,QAAA,eAAA;;AC8JP,aA9JA,IAAA,EAAA,QAAA,UACME,EAAI,SAACC,GAAMC,OAAAA,SAASC,eAAeF,IAEnCG,EAAS,CACdaAAcT,EAAGU,UAAWV,KAEjnBW,EAAQ,CACbC,GAAIC,aAAaC,QAAQ,aAAerB,KAAKC,SAASqB,SAAS,IAAIC,MAAM,GACzEC,SAAUJ,aAAaC,QAAQ,qBAAuB,IACtDI,OAAQL,aAAaC,QAAQ,mBAAqB,IAClDK,OAAQN,aAAaC,QAAQ,kBAAoB,GACjDM,OAAQP,aAAaC,QAAQ,kBAAoB,EACjDO,WAAYR,aAAaC,QAAQ,sBAAwB,EACzDQ,QAAST,aAAaC,QAAQ,mBAAqB,EACnDS,aAAcV,aAAaC,QAAQ,wBAA0BU,KAAKC,MAAMZ,aAAaC,QAAQ,yBAA2B,GACxHT,OAAQQ,aAAaC,QAAQ,kBAAoBU,KAAKC,MAAMZ,aAAaC,QAAQ,mBAAqB,GACtGY,YAAaC,KAAKC,MAClBC,sBAAsB,GAEvBxB,OAAOM,MAAQA,EAEf,IAAMmB,EAAY,WACjBC,MAAM,qCAAsC,CAC3CC,OAAQ,OACRC,KAAM,OACNC,SAAU,SACVC,MAAO,WACPC,QAAS,CACQ,eAAA,oBAEjBC,KAAMb,KAAKc,UAAU,CAAC1B,GAAID,EAAMC,GAAI2B,KAAM,YAAaC,MAAO7B,EAAMY,iBAGrEV,aAAa4B,QAAQ,WAAY9B,EAAMC,IACvCC,aAAa4B,QAAQ,mBAAoB9B,EAAMM,UAC/CJ,aAAa4B,QAAQ,iBAAkB9B,EAAMO,QAC7CL,aAAa4B,QAAQ,gBAAiB9B,EAAMQ,OAC5CN,aAAa4B,QAAQ,iBAAkB9B,EAAMW,QAC7CT,aAAa4B,QAAQ,gBAAiB9B,EAAMS,OAC5CP,aAAa4B,QAAQ,oBAAqB9B,EAAMU,WAChDR,aAAa4B,QAAQ,uBAAwBjB,KAAKc,UAAU3B,EAAMY,eAClEV,aAAa4B,QAAQ,iBAAkBjB,KAAKc,UAAU3B,EAAMN,UAGvDqC,EAAe,WAIhB/B,EAAMS,OAAST,EAAMW,OAAO,IAAM,IACzBX,EAAMU,UAAYV,EAAMS,OACzBjB,EAAOC,YACjBO,EAAMQ,SAeD5B,IAZDoD,IAAAA,EAAS,WAGR3B,IAAAA,EAAQT,EAAOS,MAAM,EAAGL,EAAMQ,OAI9BqB,EAAQxB,EAAMR,IAAK,SAAAR,GAAK4C,OAHHC,EAGqB7C,EAAEU,UAHdC,EAAMY,aAAauB,eAAeD,GACnElC,EAAMY,aAAasB,GAAMxB,UAAYV,EAAMY,aAAasB,GAAMzB,MAC9D,SAFuB,IAACyB,IAIpB,OAAA,EAAe7B,EAAAA,gBAAAA,EAAOwB,IAG1BjD,EAAWoD,IACRpD,EAASmB,WAAaC,EAAMM,UAClC1B,EAAWoD,IAEZhC,EAAMM,SAAW1B,EAASmB,UAC1BC,EAAMO,OAAS3B,EAASkB,aACxBE,EAAMe,YAAcC,KAAKC,MACzBjB,EAAMkB,sBAAuB,EAE7BC,KAGKiB,EAAc,SAAC7B,EAAQ8B,GACxB9B,GAAAA,EAAO+B,eAAiBtC,EAAMO,OAAQ,CACrC,IAACP,EAAMkB,qBAAsB,CAC1BqB,IAAAA,EAAcvB,KAAKC,MAAQjB,EAAMe,YAEnCwB,GAAAA,EAAc,KACjB,OAGKC,IAAAA,EAAMxC,EAAMS,MAAQ,GAAKjB,EAAOE,OAASM,EAAMN,OAAO+C,QAAU,EACtEzC,EAAMU,WAAa6B,EAAcC,EACjCxC,EAAMS,MAAQT,EAAMS,MAAQ,GAAKjB,EAAOE,OAASF,EAAOE,OAASM,EAAMS,MAAQ,EAC/ET,EAAMN,OAAOgD,KAAKH,GAGbvC,EAAMY,aAAauB,eAAenC,EAAMM,YAC5CN,EAAMY,aAAaZ,EAAMM,UAAY,CAACG,MAAO,EAAGC,UAAW,IAC5DV,EAAMY,aAAaZ,EAAMM,UAAUI,WAAa6B,EAChDvC,EAAMY,aAAaZ,EAAMM,UAAUG,QAK7B,OAFPT,EAAMW,SACNQ,KACO,IAMT/B,EAAE,SAASuD,QACXvD,EAAE,SAASwD,iBAAiB,OAAQ,WACnC5C,EAAMkB,sBAAuB,EAC7B9B,EAAE,SAASuD,UAGZ,IAAME,EAAe,WACpBzD,EAAE,QAAQ0D,YAAc9C,EAAMM,SAC9BlB,EAAE,UAAU0D,YAAc9C,EAAMO,OAChCnB,EAAE,SAAS2D,MAAQ,GACnB3D,EAAE,QAAQ4D,UAAUC,OAAO,WACtB7D,EAAE,QAAQ8D,YACf9D,EAAE,QAAQ4D,UAAUG,IAAI,WACxB/D,EAAE,SAAS0D,YAAqBhE,OAAAA,OAAAA,KAAKsE,MAAMpD,EAAMU,UAAYV,EAAMS,QAAU,IAAkBT,eAAAA,OAAAA,EAAMQ,QAGtG6C,WAAWR,EAAc,GACzB,IAAIR,EAAU,EAAGiB,EAAY,GACvBC,EAAW,WACZD,GAAalE,EAAE,SAAS2D,QAC3BV,IACAiB,EAAYlE,EAAE,SAAS2D,OAGpBX,EAAYhD,EAAE,SAAS2D,MAAOV,KACjCN,IACAc,IACAR,EAAU,GAGa,KAApBjD,EAAE,SAAS2D,QACd/C,EAAMkB,sBAAuB,EAC7B9B,EAAE,UAAUoE,MAAMC,QAAU,IAC5BrE,EAAE,SAAS2D,MAAQ,KAGfW,EAAgB,WAAML,OAAAA,WAAWE,EAAU,IAEjDnE,EAAE,SAASwD,iBAAiB,UAAW,SAACe,GACvCvE,EAAE,UAAUoE,MAAMC,QAAU,IACxBE,EAAEC,KAAgB,KAATD,EAAEC,MACdxE,EAAE,SAAS2D,MAAQ,IACnBY,EAAEE,kBAEHH,MAEDtE,EAAE,SAASwD,iBAAiB,WAAYc,GACxCtE,EAAE,SAASwD,iBAAiB,QAASc","file":"calibrate.f9ef6778.js","sourceRoot":"../views","sourcesContent":["export const weightedRandom = (arr, weights, trim) => {\n    // code extraced from https://github.com/chancejs/chancejs \n    // library, replacing chance.random with simple Math.random\n\n    if (arr.length !== weights.length) {\n        throw new RangeError(\"Chance: Length of array and weights must match\");\n    }\n\n    // scan weights array and sum valid entries\n    var sum = 0;\n    var val;\n    for (var weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\n        val = weights[weightIndex];\n        if (isNaN(val)) {\n            throw new RangeError(\"Chance: All weights must be numbers\");\n        }\n\n        if (val > 0) {\n            sum += val;\n        }\n    }\n\n    if (sum === 0) {\n        throw new RangeError(\"Chance: No valid entries in array weights\");\n    }\n\n    // select a value within range\n    var selected = Math.random() * sum;\n\n    // find array entry corresponding to selected value\n    var total = 0;\n    var lastGoodIdx = -1;\n    var chosenIdx;\n    for (weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\n        val = weights[weightIndex];\n        total += val;\n        if (val > 0) {\n            if (selected <= total) {\n                chosenIdx = weightIndex;\n                break;\n            }\n            lastGoodIdx = weightIndex;\n        }\n\n        // handle any possible rounding error comparison to ensure something is picked\n        if (weightIndex === (weights.length - 1)) {\n            chosenIdx = lastGoodIdx;\n        }\n    }\n\n    var chosen = arr[chosenIdx];\n    trim = (typeof trim === 'undefined') ? false : trim;\n    if (trim) {\n        arr.splice(chosenIdx, 1);\n        weights.splice(chosenIdx, 1);\n    }\n\n    return chosen;\n};","import {weightedRandom} from './util'\nconst u = (x) => document.getElementById(x);\n\nconst config = {\n\ttargetTime: 1200, // 2.2s avg\n\twindow: 50000,\n\texponent: 5\n};\n\nconst glyphs = [\"a\",\"i\",\"u\",\"e\",\"o\",\"ka\",\"ki\",\"ku\",\"ke\",\"ko\",\"sa\",\"shi\",\"su\",\"se\",\"so\",\"ta\",\"chi\",\"tsu\",\"te\",\"to\",\"na\",\"ni\",\"nu\",\"ne\",\"no\",\"ha\",\"hi\",\"fu\",\"he\",\"ho\",\"ma\",\"mi\",\"mu\",\"me\",\"mo\",\"ya\",\"yu\",\"yo\",\"ra\",\"ri\",\"ru\",\"re\",\"ro\",\"wa\",\"wi\",\"we\",\"wo\",\"n\",\"ga\",\"gi\",\"gu\",\"ge\",\"go\",\"za\",\"ji\",\"zu\",\"ze\",\"zo\",\"da\",\"ji\",\"zu\",\"de\",\"do\",\"ba\",\"bi\",\"bu\",\"be\",\"bo\",\"pa\",\"pi\",\"pu\",\"pe\",\"po\",\"vu\",\"kya\",\"kyu\",\"kyo\",\"sha\",\"shu\",\"sho\",\"cha\",\"chu\",\"cho\",\"nya\",\"nyu\",\"nyo\",\"hya\",\"hyu\",\"hyo\",\"mya\",\"myu\",\"myo\",\"rya\",\"ryu\",\"ryo\",\"gya\",\"gyu\",\"gyo\",\"ja\",\"ju\",\"jo\",\"ja\",\"ju\",\"jo\",\"bya\",\"byu\",\"byo\",\"pya\",\"pyu\",\"pyo\"].map(x=>({romanization: x, character: x}));\n\nconst state = {\n\tid: localStorage.getItem('yajla.id') || Math.random().toString(16).slice(2),\n\tquestion: localStorage.getItem('yajla.c.question') || 'a' ,\n\tanswer: localStorage.getItem('yajla.c.answer') || 'a',\n\tlevel: +localStorage.getItem('yajla.c.level') || 70,\n\ttests: +localStorage.getItem('yajla.c.tests') || 0,\n\ttotalTime: +localStorage.getItem('yajla.c.totalTime') || 0,\n\trounds: +localStorage.getItem('yajla.c.rounds') || 0,\n\tstatsPerChar: localStorage.getItem('yajla.c.statsPerChar') ? JSON.parse(localStorage.getItem('yajla.c.statsPerChar')) : {},\n\twindow: localStorage.getItem('yajla.c.window') ? JSON.parse(localStorage.getItem('yajla.c.window')) : [],\n\ttimeStarted: Date.now(),\n\tcurrentTestNotRanked: true\n}\nwindow.state = state;\n\nconst saveState = () => {\n\tfetch('https://box.paulll.cc/yajla-stats/', {\n\t\tmethod: 'POST',\n\t\tmode: 'cors',\n\t\tredirect: 'follow',\n\t\tcache: 'no-cache',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({id: state.id, type: 'calibrate', stats: state.statsPerChar})\n\t});\n\n\tlocalStorage.setItem('yajla.id', state.id);\n\tlocalStorage.setItem('yajla.c.question', state.question);\n\tlocalStorage.setItem('yajla.c.answer', state.answer);\n\tlocalStorage.setItem('yajla.c.level', state.level);\n\tlocalStorage.setItem('yajla.c.rounds', state.rounds);\t\n\tlocalStorage.setItem('yajla.c.tests', state.tests);\n\tlocalStorage.setItem('yajla.c.totalTime', state.totalTime);\n\tlocalStorage.setItem('yajla.c.statsPerChar', JSON.stringify(state.statsPerChar));\n\tlocalStorage.setItem('yajla.c.window', JSON.stringify(state.window));\n}\n\nconst nextQuestion = () => {\n\n\t// basic difficulty increasing strategy\n\t// not very smart, btw\n\tif (state.tests && state.rounds%10 == 0) {\n\t\tconst avg = state.totalTime / state.tests;\n\t\tif (avg <= config.targetTime)\n\t\t\tstate.level++;\n\t}\n\n\tconst select = () => {\n\t\t// slice [0:level],\n\t\t// then chance.weighted([0:level], [avgTime]) \n\t\tconst slice = glyphs.slice(0, state.level);\n\t\tconst getAveragePerChar = (char) => state.statsPerChar.hasOwnProperty(char) \n\t\t\t? state.statsPerChar[char].totalTime / state.statsPerChar[char].tests\n\t\t\t: 99999999;\n\t\tconst stats = slice.map( x => getAveragePerChar(x.character))\n\t\treturn weightedRandom(slice, stats);\n\t}\n\t\n\tlet selected = select();\n\twhile (selected.character == state.question)\n\t\tselected = select();\n\n\tstate.question = selected.character;\n\tstate.answer = selected.romanization;\n\tstate.timeStarted = Date.now();\n\tstate.currentTestNotRanked = false;\n\n\tsaveState();\n}\n\nconst checkAnswer = (answer, changes) => {\n\tif (answer.toLowerCase() == state.answer) {\n\t\tif (!state.currentTestNotRanked) {\n\t\t\tconst timeElapsed = Date.now() - state.timeStarted;\n\t\t\t\n\t\t\tif (timeElapsed > 7500)\n\t\t\t\treturn;\n\n\t\t\t// update global stats (window)\n\t\t\tconst old = state.tests + 1 >= config.window ? state.window.shift() : 0;\n\t\t\tstate.totalTime += timeElapsed - old\n\t\t\tstate.tests = state.tests + 1 >= config.window ? config.window : state.tests + 1;\n\t\t\tstate.window.push(timeElapsed);\n\n\t\t\t// update per-character stats\n\t\t\tif (!state.statsPerChar.hasOwnProperty(state.question))\n\t\t\t\tstate.statsPerChar[state.question] = {tests: 0, totalTime: 0}\n\t\t\tstate.statsPerChar[state.question].totalTime += timeElapsed\n\t\t\tstate.statsPerChar[state.question].tests++;\n\t\t}\n\n\t\tstate.rounds++;\n\t\tsaveState();\n\t\treturn true;\n\t}\n}\n\n// dom\n\nu('input').focus();\nu('input').addEventListener('blur', () =>  {\n\tstate.currentTestNotRanked = true;\n\tu('input').focus();\n});\n\nconst drawQuestion = () => {\n\tu('char').textContent = state.question\n\tu('answer').textContent = state.answer\n\tu('input').value = '';\n\tu('char').classList.remove('animate');\n\tvoid u('char').offsetWidth;\n\tu('char').classList.add('animate');\n\tu('stats').textContent = `avg ${Math.floor(state.totalTime / state.tests) || 1000}ms\\t level ${state.level}`;\n}\n\nsetTimeout(drawQuestion, 0);\nlet changes = 0, lastState = '';\nconst listener = () => {\n\tif (lastState != u('input').value) {\n\t\tchanges++;\n\t\tlastState = u('input').value;\n\t}\n\n\tif (checkAnswer(u('input').value, changes)) {\n\t\tnextQuestion()\n\t\tdrawQuestion()\n\t\tchanges = 0;\n\t}\n\n\tif (u('input').value == ' ') {\n\t\tstate.currentTestNotRanked = true;\n\t\tu('answer').style.opacity = '1';\n\t\tu('input').value = '';\n\t}\n}\nconst listenerAsync = () => setTimeout(listener, 0);\n\nu('input').addEventListener('keydown', (e) => {\n\tu('answer').style.opacity = '0';\n\tif (e.key && e.key == ' ') {\n\t\tu('input').value = ' ';\n\t\te.preventDefault();\n\t}\n\tlistenerAsync();\n});\nu('input').addEventListener('keypress', listenerAsync);\nu('input').addEventListener('input', listenerAsync);\n"]}