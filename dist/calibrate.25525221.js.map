{"mappings":"YAAO,ICCDA,EAAI,SAACC,GAAD,OAAOC,SAASC,eAAeF,IAEnCG,EACO,KADPA,EAEG,IAIHC,EAAS,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAOC,KAAI,SAAAL,GAAC,MAAG,CAACM,aAAcN,EAAGO,UAAWP,MAEjnBQ,EAAQ,CACbC,GAAIC,aAAaC,QAAQ,aAAeC,KAAKC,SAASC,SAAS,IAAIC,MAAM,GACzEC,SAAUN,aAAaC,QAAQ,qBAAuB,IACtDM,OAAQP,aAAaC,QAAQ,mBAAqB,IAClDO,OAAQR,aAAaC,QAAQ,kBAAoB,GACjDQ,OAAQT,aAAaC,QAAQ,kBAAoB,EACjDS,WAAYV,aAAaC,QAAQ,sBAAwB,EACzDU,QAASX,aAAaC,QAAQ,mBAAqB,EACnDW,aAAcZ,aAAaC,QAAQ,wBAA0BY,KAAKC,MAAMd,aAAaC,QAAQ,yBAA2B,GACxHc,OAAQf,aAAaC,QAAQ,kBAAoBY,KAAKC,MAAMd,aAAaC,QAAQ,mBAAqB,GACtGe,YAAaC,KAAKC,MAClBC,sBAAsB,GAEvBJ,OAAOjB,MAAQA,EAEf,IAAMsB,EAAY,WACjBC,MAAM,qCAAsC,CAC3CC,OAAQ,OACRC,KAAM,OACNC,SAAU,SACVC,MAAO,WACPC,QAAS,CACRC,eAAgB,oBAEjBC,KAAMf,KAAKgB,UAAU,CAAC9B,GAAID,EAAMC,GAAI+B,KAAM,YAAaC,MAAOjC,EAAMc,iBAGrEZ,aAAagC,QAAQ,WAAYlC,EAAMC,IACvCC,aAAagC,QAAQ,mBAAoBlC,EAAMQ,UAC/CN,aAAagC,QAAQ,iBAAkBlC,EAAMS,QAC7CP,aAAagC,QAAQ,gBAAiBlC,EAAMU,OAC5CR,aAAagC,QAAQ,iBAAkBlC,EAAMa,QAC7CX,aAAagC,QAAQ,gBAAiBlC,EAAMW,OAC5CT,aAAagC,QAAQ,oBAAqBlC,EAAMY,WAChDV,aAAagC,QAAQ,uBAAwBnB,KAAKgB,UAAU/B,EAAMc,eAClEZ,aAAagC,QAAQ,iBAAkBnB,KAAKgB,UAAU/B,EAAMiB,UAGvDkB,EAAe,WAIhBnC,EAAMW,OAASX,EAAMa,OAAO,IAAM,IACzBb,EAAMY,UAAYZ,EAAMW,OACzBhB,GACVK,EAAMU,SAeR,IAZA,IAAM0B,EAAS,WAGd,IAAM7B,EAAQX,EAAOW,MAAM,EAAGP,EAAMU,OAI9BuB,EAAQ1B,EAAMV,KAAK,SAAAL,GAAC,OAHC6C,EAGqB7C,EAAEO,UAHdC,EAAMc,aAAawB,eAAeD,GACnErC,EAAMc,aAAauB,GAAMzB,UAAYZ,EAAMc,aAAauB,GAAM1B,MAC9D,SAFuB,IAAC0B,KAI3B,ODnE4B,SAACE,EAAKC,EAASC,GAIzC,GAAIF,EAAIG,SAAWF,EAAQE,OACvB,MAAM,IAAIC,WAAW,kDAMzB,IAFA,IACIC,EADAC,EAAM,EAEDC,EAAc,EAAGA,EAAcN,EAAQE,SAAUI,EAAa,CAEnE,GADAF,EAAMJ,EAAQM,GACVC,MAAMH,GACN,MAAM,IAAID,WAAW,uCAGrBC,EAAM,IACNC,GAAOD,GAIf,GAAY,IAARC,EACA,MAAM,IAAIF,WAAW,6CAIzB,IAKIK,EALAC,EAAW7C,KAAKC,SAAWwC,EAG3BK,EAAQ,EACRC,GAAe,EAEnB,IAAKL,EAAc,EAAGA,EAAcN,EAAQE,SAAUI,EAAa,CAG/D,GADAI,GADAN,EAAMJ,EAAQM,GAEVF,EAAM,EAAG,CACT,GAAIK,GAAYC,EAAO,CACnBF,EAAYF,EACZ,MAEJK,EAAcL,EAIdA,IAAiBN,EAAQE,OAAS,IAClCM,EAAYG,GAIpB,IAAIC,EAASb,EAAIS,GAOjB,OANAP,OAAwB,IAATA,GAAgCA,KAE3CF,EAAIc,OAAOL,EAAW,GACtBR,EAAQa,OAAOL,EAAW,IAGvBI,ECUFE,CAAe/C,EAAO0B,IAG1BgB,EAAWb,IACRa,EAASlD,WAAaC,EAAMQ,UAClCyC,EAAWb,IAEZpC,EAAMQ,SAAWyC,EAASlD,UAC1BC,EAAMS,OAASwC,EAASnD,aACxBE,EAAMkB,YAAcC,KAAKC,MACzBpB,EAAMqB,sBAAuB,EAE7BC,KAgCD/B,EAAE,SAASgE,QACXhE,EAAE,SAASiE,iBAAiB,QAAQ,WACnCxD,EAAMqB,sBAAuB,EAC7B9B,EAAE,SAASgE,WAGZ,IAAME,EAAe,WACpBlE,EAAE,QAAQmE,YAAc1D,EAAMQ,SAC9BjB,EAAE,UAAUmE,YAAc1D,EAAMS,OAChClB,EAAE,SAASoE,MAAQ,GACnBpE,EAAE,QAAQqE,UAAUC,OAAO,WACtBtE,EAAE,QAAQuE,YACfvE,EAAE,QAAQqE,UAAUG,IAAI,WACxBxE,EAAE,SAASmE,YAAX,OAAAM,OAAgC5D,KAAK6D,MAAMjE,EAAMY,UAAYZ,EAAMW,QAAU,IAA7E,eAAAqD,OAA+FhE,EAAMU,QAGtGwD,WAAWT,EAAc,GACzB,IAAiBU,EAAY,GACvBC,EAAW,WACZD,GAAa5E,EAAE,SAASoE,QAE3BQ,EAAY5E,EAAE,SAASoE,OAlDL,SAAClD,EAAQ4D,GAC5B,GAAI5D,EAAO6D,eAAiBtE,EAAMS,OAAQ,CACzC,IAAKT,EAAMqB,qBAAsB,CAChC,IAAMkD,EAAcpD,KAAKC,MAAQpB,EAAMkB,YAEvC,GAAIqD,EAAc,KACjB,OAGD,IAAMC,EAAMxE,EAAMW,MAAQ,GAAKhB,EAAgBK,EAAMiB,OAAOwD,QAAU,EACtEzE,EAAMY,WAAa2D,EAAcC,EACjCxE,EAAMW,MAAQX,EAAMW,MAAQ,GAAKhB,EAAgBA,EAAgBK,EAAMW,MAAQ,EAC/EX,EAAMiB,OAAOyD,KAAKH,GAGbvE,EAAMc,aAAawB,eAAetC,EAAMQ,YAC5CR,EAAMc,aAAad,EAAMQ,UAAY,CAACG,MAAO,EAAGC,UAAW,IAC5DZ,EAAMc,aAAad,EAAMQ,UAAUI,WAAa2D,EAChDvE,EAAMc,aAAad,EAAMQ,UAAUG,QAKpC,OAFAX,EAAMa,SACNS,KACO,GA8BJqD,CAAYpF,EAAE,SAASoE,SAC1BxB,IACAsB,IACU,GAGa,KAApBlE,EAAE,SAASoE,QACd3D,EAAMqB,sBAAuB,EAC7B9B,EAAE,UAAUqF,MAAMC,QAAU,IAC5BtF,EAAE,SAASoE,MAAQ,KAGfmB,EAAgB,WAAA,OAAMZ,WAAWE,EAAU,IAEjD7E,EAAE,SAASiE,iBAAiB,WAAW,SAACuB,GACvCxF,EAAE,UAAUqF,MAAMC,QAAU,IACxBE,EAAEC,KAAgB,KAATD,EAAEC,MACdzF,EAAE,SAASoE,MAAQ,IACnBoB,EAAEE,kBAEHH,OAEDvF,EAAE,SAASiE,iBAAiB,WAAYsB,GACxCvF,EAAE,SAASiE,iBAAiB,QAASsB","sources":["src/util.js","src/calibrate.js"],"names":["u","x","document","getElementById","config","glyphs","map","romanization","character","state","id","localStorage","getItem","Math","random","toString","slice","question","answer","level","tests","totalTime","rounds","statsPerChar","JSON","parse","window","timeStarted","Date","now","currentTestNotRanked","saveState","fetch","method","mode","redirect","cache","headers","Content-Type","body","stringify","type","stats","setItem","nextQuestion","select","char","hasOwnProperty","arr","weights","trim","length","RangeError","val","sum","weightIndex","isNaN","chosenIdx","selected","total","lastGoodIdx","chosen","splice","$e21c283ecb75cd4534689fdeb34870c$export$weightedRandom","focus","addEventListener","drawQuestion","textContent","value","classList","remove","offsetWidth","add","concat","floor","setTimeout","lastState","listener","changes","toLowerCase","timeElapsed","old","shift","push","checkAnswer","style","opacity","listenerAsync","e","key","preventDefault"],"version":3,"file":"calibrate.25525221.js.map","sourcesContent":["export const weightedRandom = (arr, weights, trim) => {\n    // code extraced from https://github.com/chancejs/chancejs \n    // library, replacing chance.random with simple Math.random\n\n    if (arr.length !== weights.length) {\n        throw new RangeError(\"Chance: Length of array and weights must match\");\n    }\n\n    // scan weights array and sum valid entries\n    var sum = 0;\n    var val;\n    for (var weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\n        val = weights[weightIndex];\n        if (isNaN(val)) {\n            throw new RangeError(\"Chance: All weights must be numbers\");\n        }\n\n        if (val > 0) {\n            sum += val;\n        }\n    }\n\n    if (sum === 0) {\n        throw new RangeError(\"Chance: No valid entries in array weights\");\n    }\n\n    // select a value within range\n    var selected = Math.random() * sum;\n\n    // find array entry corresponding to selected value\n    var total = 0;\n    var lastGoodIdx = -1;\n    var chosenIdx;\n    for (weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\n        val = weights[weightIndex];\n        total += val;\n        if (val > 0) {\n            if (selected <= total) {\n                chosenIdx = weightIndex;\n                break;\n            }\n            lastGoodIdx = weightIndex;\n        }\n\n        // handle any possible rounding error comparison to ensure something is picked\n        if (weightIndex === (weights.length - 1)) {\n            chosenIdx = lastGoodIdx;\n        }\n    }\n\n    var chosen = arr[chosenIdx];\n    trim = (typeof trim === 'undefined') ? false : trim;\n    if (trim) {\n        arr.splice(chosenIdx, 1);\n        weights.splice(chosenIdx, 1);\n    }\n\n    return chosen;\n};","import {weightedRandom} from './util'\nconst u = (x) => document.getElementById(x);\n\nconst config = {\n\ttargetTime: 1200, // 2.2s avg\n\twindow: 50000,\n\texponent: 5\n};\n\nconst glyphs = [\"a\",\"i\",\"u\",\"e\",\"o\",\"ka\",\"ki\",\"ku\",\"ke\",\"ko\",\"sa\",\"shi\",\"su\",\"se\",\"so\",\"ta\",\"chi\",\"tsu\",\"te\",\"to\",\"na\",\"ni\",\"nu\",\"ne\",\"no\",\"ha\",\"hi\",\"fu\",\"he\",\"ho\",\"ma\",\"mi\",\"mu\",\"me\",\"mo\",\"ya\",\"yu\",\"yo\",\"ra\",\"ri\",\"ru\",\"re\",\"ro\",\"wa\",\"wi\",\"we\",\"wo\",\"n\",\"ga\",\"gi\",\"gu\",\"ge\",\"go\",\"za\",\"ji\",\"zu\",\"ze\",\"zo\",\"da\",\"ji\",\"zu\",\"de\",\"do\",\"ba\",\"bi\",\"bu\",\"be\",\"bo\",\"pa\",\"pi\",\"pu\",\"pe\",\"po\",\"vu\",\"kya\",\"kyu\",\"kyo\",\"sha\",\"shu\",\"sho\",\"cha\",\"chu\",\"cho\",\"nya\",\"nyu\",\"nyo\",\"hya\",\"hyu\",\"hyo\",\"mya\",\"myu\",\"myo\",\"rya\",\"ryu\",\"ryo\",\"gya\",\"gyu\",\"gyo\",\"ja\",\"ju\",\"jo\",\"ja\",\"ju\",\"jo\",\"bya\",\"byu\",\"byo\",\"pya\",\"pyu\",\"pyo\"].map(x=>({romanization: x, character: x}));\n\nconst state = {\n\tid: localStorage.getItem('yajla.id') || Math.random().toString(16).slice(2),\n\tquestion: localStorage.getItem('yajla.c.question') || 'a' ,\n\tanswer: localStorage.getItem('yajla.c.answer') || 'a',\n\tlevel: +localStorage.getItem('yajla.c.level') || 70,\n\ttests: +localStorage.getItem('yajla.c.tests') || 0,\n\ttotalTime: +localStorage.getItem('yajla.c.totalTime') || 0,\n\trounds: +localStorage.getItem('yajla.c.rounds') || 0,\n\tstatsPerChar: localStorage.getItem('yajla.c.statsPerChar') ? JSON.parse(localStorage.getItem('yajla.c.statsPerChar')) : {},\n\twindow: localStorage.getItem('yajla.c.window') ? JSON.parse(localStorage.getItem('yajla.c.window')) : [],\n\ttimeStarted: Date.now(),\n\tcurrentTestNotRanked: true\n}\nwindow.state = state;\n\nconst saveState = () => {\n\tfetch('https://box.paulll.cc/yajla-stats/', {\n\t\tmethod: 'POST',\n\t\tmode: 'cors',\n\t\tredirect: 'follow',\n\t\tcache: 'no-cache',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({id: state.id, type: 'calibrate', stats: state.statsPerChar})\n\t});\n\n\tlocalStorage.setItem('yajla.id', state.id);\n\tlocalStorage.setItem('yajla.c.question', state.question);\n\tlocalStorage.setItem('yajla.c.answer', state.answer);\n\tlocalStorage.setItem('yajla.c.level', state.level);\n\tlocalStorage.setItem('yajla.c.rounds', state.rounds);\t\n\tlocalStorage.setItem('yajla.c.tests', state.tests);\n\tlocalStorage.setItem('yajla.c.totalTime', state.totalTime);\n\tlocalStorage.setItem('yajla.c.statsPerChar', JSON.stringify(state.statsPerChar));\n\tlocalStorage.setItem('yajla.c.window', JSON.stringify(state.window));\n}\n\nconst nextQuestion = () => {\n\n\t// basic difficulty increasing strategy\n\t// not very smart, btw\n\tif (state.tests && state.rounds%10 == 0) {\n\t\tconst avg = state.totalTime / state.tests;\n\t\tif (avg <= config.targetTime)\n\t\t\tstate.level++;\n\t}\n\n\tconst select = () => {\n\t\t// slice [0:level],\n\t\t// then chance.weighted([0:level], [avgTime]) \n\t\tconst slice = glyphs.slice(0, state.level);\n\t\tconst getAveragePerChar = (char) => state.statsPerChar.hasOwnProperty(char) \n\t\t\t? state.statsPerChar[char].totalTime / state.statsPerChar[char].tests\n\t\t\t: 99999999;\n\t\tconst stats = slice.map( x => getAveragePerChar(x.character))\n\t\treturn weightedRandom(slice, stats);\n\t}\n\t\n\tlet selected = select();\n\twhile (selected.character == state.question)\n\t\tselected = select();\n\n\tstate.question = selected.character;\n\tstate.answer = selected.romanization;\n\tstate.timeStarted = Date.now();\n\tstate.currentTestNotRanked = false;\n\n\tsaveState();\n}\n\nconst checkAnswer = (answer, changes) => {\n\tif (answer.toLowerCase() == state.answer) {\n\t\tif (!state.currentTestNotRanked) {\n\t\t\tconst timeElapsed = Date.now() - state.timeStarted;\n\t\t\t\n\t\t\tif (timeElapsed > 7500)\n\t\t\t\treturn;\n\n\t\t\t// update global stats (window)\n\t\t\tconst old = state.tests + 1 >= config.window ? state.window.shift() : 0;\n\t\t\tstate.totalTime += timeElapsed - old\n\t\t\tstate.tests = state.tests + 1 >= config.window ? config.window : state.tests + 1;\n\t\t\tstate.window.push(timeElapsed);\n\n\t\t\t// update per-character stats\n\t\t\tif (!state.statsPerChar.hasOwnProperty(state.question))\n\t\t\t\tstate.statsPerChar[state.question] = {tests: 0, totalTime: 0}\n\t\t\tstate.statsPerChar[state.question].totalTime += timeElapsed\n\t\t\tstate.statsPerChar[state.question].tests++;\n\t\t}\n\n\t\tstate.rounds++;\n\t\tsaveState();\n\t\treturn true;\n\t}\n}\n\n// dom\n\nu('input').focus();\nu('input').addEventListener('blur', () =>  {\n\tstate.currentTestNotRanked = true;\n\tu('input').focus();\n});\n\nconst drawQuestion = () => {\n\tu('char').textContent = state.question\n\tu('answer').textContent = state.answer\n\tu('input').value = '';\n\tu('char').classList.remove('animate');\n\tvoid u('char').offsetWidth;\n\tu('char').classList.add('animate');\n\tu('stats').textContent = `avg ${Math.floor(state.totalTime / state.tests) || 1000}ms\\t level ${state.level}`;\n}\n\nsetTimeout(drawQuestion, 0);\nlet changes = 0, lastState = '';\nconst listener = () => {\n\tif (lastState != u('input').value) {\n\t\tchanges++;\n\t\tlastState = u('input').value;\n\t}\n\n\tif (checkAnswer(u('input').value, changes)) {\n\t\tnextQuestion()\n\t\tdrawQuestion()\n\t\tchanges = 0;\n\t}\n\n\tif (u('input').value == ' ') {\n\t\tstate.currentTestNotRanked = true;\n\t\tu('answer').style.opacity = '1';\n\t\tu('input').value = '';\n\t}\n}\nconst listenerAsync = () => setTimeout(listener, 0);\n\nu('input').addEventListener('keydown', (e) => {\n\tu('answer').style.opacity = '0';\n\tif (e.key && e.key == ' ') {\n\t\tu('input').value = ' ';\n\t\te.preventDefault();\n\t}\n\tlistenerAsync();\n});\nu('input').addEventListener('keypress', listenerAsync);\nu('input').addEventListener('input', listenerAsync);\n"]}